version: 2.1

orbs:
  kube: circleci/kubernetes@0.11.0

executors:
  ruby:
    docker:
      - image: cimg/ruby:2.7.1
    working_directory: ~/{{ cookiecutter.slug }}

commands:
  # This command sets up the important bits of the ruby environment
  # used in the job executing direct Ruby commands (eg: rspec)
  setup_environment_for_tests:
    steps:
      - checkout
      - run:
          name: Install the Bundler gem
          command: gem install bundler --no-document
      - run:
          name: Configuration bundler and install dependencies
          command: |
            bundle config set --local with test && \
            bundle config get with && \
            bundle install
  # This command sets up the environment for dÃ©ployment purpose, it
  # mainly install dependencies used by the .circleci/script/version script
  setup_environment_for_deployment:
    steps:
      - checkout
      - run:
          name: Install the Bundler gem
          command: gem install bundler --no-document
      - run:
          name: Configuration bundler and install dependencies
          command: |
            bundle config set --local with deployment && \
            bundle config get with && \
            bundle install

jobs:
  # This job runs the unit tests and stores the results in
  # a folder where circleci can access to display results.
  rspec:
    docker:
      - image: cimg/ruby:{{ cookiecutter.ruby }}
      - image: circleci/mongo:4.4.1
    steps:
      - run:
          name: Creates RSpec directory
          command: mkdir -p /tmp/results/rspec
      - setup_environment_for_tests
      - run:
          name: Runs unit tests
          command: |
            bundle exec rspec \
              --format RspecJunitFormatter \
              --out /tmp/results/rspec/results.xml \
              --format html \
              --out /tmp/results/rspec/results.html \
              --format progress \
              spec/
      - store_test_results:
          path: /tmp/results/rspec
      - store_artifacts:
          path: /tmp/results
          destination: results
  # This job runs the Rubocop Linter and stores the results
  # in a folder where circleci can access to display them.
  rubocop:
    executor: ruby
    steps:
      - run:
          name: Creates Rubocop directory
          command: mkdir /tmp/rubocop
      - setup_environment_for_tests
      - run:
          name: Runs Rubocop checks
          command: |
            bundle exec rubocop \
              --fail-fast \
              --format html \
              --out /tmp/rubocop/results.html \
              controllers/ decorators/ services/
      - store_test_results:
          path: /tmp/rubocop
      - store_artifacts:
          path: /tmp/rubocop
          destination: rubocop
  # This jobs builds the documentation for the project and
  # stores it so it's easily accessible for developers.
  documentation:
    executor: ruby
    steps:
      - run:
          name: Creates documentation directory
          command: mkdir /tmp/documentation
      - setup_environment_for_tests
      - run:
          name: Generates documentation
          command: |
            bundle exec yard doc \
              --output-dir /tmp/documentation \
              controllers/ decorators/ services/
      - store_test_results:
          path: /tmp/documentation
      - store_artifacts:
          path: /tmp/documentation
          destination: documentation
  # This job builds and pushes the docker image into Docker HUB
  docker:
    executor: ruby
    steps:
      - setup_environment_for_deployment
      - run:
          name: Export the version in the environment
          command: echo 'export NEXT_VERSION=`ruby ~/{{ cookiecutter.slug }}/.circleci/scripts/version.rb next`' >> $BASH_ENV
      - setup_remote_docker
      - run:
          name: Logs in to Docker
          command: echo $DOCKER_PWD | docker login --username $DOCKER_USER --password-stdin
      - run:
          name: Builds the image
          command: |
            docker build \
              --tag virtuatable/{{ cookiecutter.slug }}:${NEXT_VERSION} \
              --file Dockerfile .
      - run:
          name: Pushes the image on Docker HUB
          command: docker push virtuatable/{{ cookiecutter.slug }}:${NEXT_VERSION}
  # This job deploys the last version released on Docker HUB to
  # the Kubernetes cluster declared in the KUBE_CONFIG env variable.
  deployment:
    executor: ruby
    steps:
      - kube/install-kubectl
      - setup_environment_for_deployment
      - run:
          name: Export the version in the environment
          command: echo 'export NEXT_VERSION=`ruby ~/{{ cookiecutter.slug }}/.circleci/scripts/version.rb current`' >> $BASH_ENV
      - run:
          name: Create kubernetes directory
          command: mkdir $HOME/.kube
      - run:
          name: Store the kubernetes configuration
          command: echo -n "${KUBERNETES_CONFIG}" | base64 --decode > $HOME/.kube/config
      - run:
          name: Creates or update the service
          command: kubectl apply -f kube/service.yml
      - run:
          name: Creates or updates the ingress
          command: kubectl apply -f kube/ingress.yml
      - run:
          name: Updates the version in the deployment file
          command: sed -i -e 's/<VERSION>/'"${NEXT_VERSION}"'/g' kube/deployment.yml
      - run:
          name: Creates or updates the deployment
          command: kubectl apply -f kube/deployment.yml

workflows:
  version: 2.1
  # This workflow runs every tests to ensure the application is compliant
  # With our standards, then deploy it on the production environment.
  # We directly deploy in production because our standards are high, and
  # our services are well-tested.
  production:
    jobs:
      - rspec
      - rubocop
      - documentation
      - docker:
          context:
            - virtuatable
          requires:
            - rspec
            - rubocop
          filters:
            branches:
              only: master
      - deployment:
          context:
            - virtuatable
          requires:
            - docker
          filters:
            branches:
              only: master